#!/usr/bin/env python3

# Copyright (c) 2016 Tommi Airikka <tommi@airikka.net>
# License: GPLv2
# Updated by nbenm nb@dagami.org june 2020

import sys, struct, serial, argparse
from dateutil.parser import parse

#####################
##### Variables #####
#####################
parser = argparse.ArgumentParser(add_help=False, description='Download stored data from a CMS50D+ oximeter.',formatter_class=lambda prog: argparse.HelpFormatter(prog,max_help_position=40))
parser.add_argument('device', type=str, help='path to device file')
parser.add_argument('outfile', type=str, help='output file path')
parser.add_argument('-s', '--start-time', dest='starttime', type=str, help='start time (\"YYYY-MM-DD HH:MM:SS\")')
parser.add_argument('-n', '--name', dest='name', type=str, help='patient name')
parser.add_argument('-a', '--age', dest='age', type=int, help='patient age')
parser.add_argument('-h', '--height', dest='height', type=int, help='patient height in cm')
parser.add_argument('-w', '--weight', dest='weight', type=float, help='patient weight in Kg')
parser.add_argument('-m', '--model', dest='model', type=str, help='device model')
parser.add_argument('-x', '--sex', dest='sex', type=str, help='patient sex (M:Male, F:Female')
parser.add_argument('-c', '--comment', dest='comment', type=str, help='comment')
parser.add_argument('-t', '--nationality', dest='nationality', type=str, help='patient nationality')

if len(sys.argv) < 2:
  parser.print_help()
  sys.exit(1)

args = parser.parse_args()

device = args.device
outfile = args.outfile
starttime = args.starttime
name = args.name
age = args.age
height = args.height
weight = args.weight
model = args.model
sex = args.sex
comment = args.comment
nationality = args.nationality
ser = serial.Serial()

###################
##### Helpers #####
###################
# Pack little endian
def _ple(i):
    return struct.pack("<I", i)

def _get_real_values(fs):
    
    (oval1,oval2) = fs
    v1 = oval1 - 0x80
    v2 = oval2 - 0x80
    if v1 == 0 or oval1 == 0xFF:
        v1 = 127
    if v2 == 0 or oval2 == 0xFF:
        v2 = 255
    return (v1,v2)

def _parse_list(toparse, parsed):
    while toparse:
        if len(toparse) > 1:
            fs = (toparse.pop(0),toparse.pop(0))
            if not fs == ('\x0f','\x80'):
                (f,s) = _get_real_values(fs)
                if f >= 0 and s >= 0:
#                    print (f,', ',s)
                    parsed.append(f)
                    parsed.append(s)
        else:
            toparse.pop(0)

#####################
##### Functions #####
#####################
def configure_serial(ser):
    ser.baudrate = 115200               # 115200
    ser.bytesize = serial.EIGHTBITS     # 8
    ser.parity = serial.PARITY_NONE     # N
    ser.stopbits = serial.STOPBITS_ONE  # 1
    ser.xonxoff = 1                     # XON/XOFF flow control
    ser.timeout = 1
    ser.port = device

def get_raw_data(ser):
    sys.stdout.write("Connecting to device...")
    sys.stdout.flush()
    ser.open()
    sys.stdout.write("reading...")
    sys.stdout.flush()
    ser.write(b'\x7d\x81\xa6')
    raw = list(ser.readall())
    ser.close()
    if len(raw) <= 1:
        print("no data received. Is the device on?")
        exit(43)
    print("done!")
    return raw

def parse_raw_data(data):
    sys.stdout.write("Parsing data...", )
    sys.stdout.flush()
    parsed = []
    _parse_list(data, parsed)
    print("done!")
    return parsed

def get_len_of_parsed_data(parsed):
    return int(len(parsed) / 2) # 1Hz, two values (pulse and sats)

def write_to_file(parsed, total_len, f):
    sys.stdout.write("Writing to file...", )
    sys.stdout.flush()

    zeroval = _ple(0)
    f.write(_ple(856))
    f.write(_ple(1))
    for _ in range(212):
        f.write(zeroval)
    f.write(_ple(1))
    for _ in range(55):
        f.write(zeroval)
    f.write(_ple(total_len))
    for e in parsed:
        f.write(chr(e).encode('latin1'))

def change_starttime(f):
    if starttime != None:
        sys.stdout.write("changing start time...", )
        sys.stdout.flush()
        dt = parse(starttime, dayfirst=False, yearfirst=True)
        year = _ple(dt.year)
        month = _ple(dt.month)
        day = _ple(dt.day)
        hour = _ple(dt.hour)
        minute = _ple(dt.minute)
        second = _ple(dt.second)
        f.seek(0x420)
        s = year + month + day + hour + minute + second
        f.write(s)

def set_user_data():
  global height
  global weight
  global age
  global name
  global model
  global sex
  global comment
  global nationality

  if height != None:
    height=struct.pack("<I", height * 1000)
    f.seek(0x8)
    f.write(height)
  if weight != None:
    weight=struct.pack("<I", int(weight * 1000))
    f.seek(0xC)
    f.write(weight)
  if age != None:
    age=bytes([age])
    f.seek(0x10)
    f.write(age)
  if sex != None:
    if sex == 'M':
      sex = 1
    elif sex == 'F':
      sex = 2
  sex=bytes([sex])
  f.seek(0x14)
  f.write(sex)
  if name != None:
    name = name.encode('utf-16le')
    f.seek(0x18)
    f.write(name)
  if comment != None:
    comment = comment.encode('utf-16le')
    f.seek(0x118)
    f.write(comment)
  if nationality != None:
    nationality = nationality.encode('utf-16le')
    f.seek(0x318)
    f.write(nationality)
  if model != None:
    model = model.encode('utf-16le')
    f.seek(0x360)
    f.write(model)

################
##### Main #####
################
configure_serial(ser)
data = get_raw_data(ser)
parsed = parse_raw_data(data)
total_len = get_len_of_parsed_data(parsed)
f = open(outfile, 'wb')
write_to_file(parsed, total_len, f)
change_starttime(f)
set_user_data()
f.close()
print("done!")
